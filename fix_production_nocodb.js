#!/usr/bin/env node
/**
 * üîß SCRIPT DE CORRECTION PRODUCTION NOCODB
 * 
 * Ce script applique la configuration NocoDB manquante pour Houdemont
 * et nettoie le cache de v√©rification des factures.
 * 
 * Usage: node fix_production_nocodb.js
 */

import { Client } from 'pg';

// Configuration de la base de donn√©es
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL non d√©finie');
  process.exit(1);
}

const client = new Client({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function fixProductionNocoDB() {
  try {
    console.log('üîó Connexion √† la base de donn√©es...');
    await client.connect();

    // 1. V√©rifier la configuration actuelle
    console.log('üîç V√©rification de la configuration actuelle...');
    const currentConfig = await client.query(`
      SELECT id, name, nocodb_config_id, nocodb_table_id, invoice_column_name 
      FROM groups 
      WHERE name IN ('Frouard', 'Houdemont')
    `);
    
    console.log('üìã Configuration actuelle:');
    currentConfig.rows.forEach(row => {
      console.log(`  - ${row.name}: nocodb_config_id=${row.nocodb_config_id}, table_id=${row.nocodb_table_id}`);
    });

    // 2. Mettre √† jour Houdemont si n√©cessaire
    const houdemontConfig = currentConfig.rows.find(row => row.name === 'Houdemont');
    if (!houdemontConfig.nocodb_config_id) {
      console.log('üîß Mise √† jour de la configuration Houdemont...');
      await client.query(`
        UPDATE groups SET 
          nocodb_config_id = 1, 
          nocodb_table_id = 'my7zunxprumahmm', 
          invoice_column_name = 'RefFacture'
        WHERE name = 'Houdemont'
      `);
      console.log('‚úÖ Configuration Houdemont mise √† jour');
    } else {
      console.log('‚úÖ Configuration Houdemont d√©j√† en place');
    }

    // 3. Nettoyer le cache de v√©rification
    console.log('üóëÔ∏è Nettoyage du cache de v√©rification...');
    const deletedRows = await client.query('DELETE FROM invoice_verification_cache');
    console.log(`‚úÖ Cache nettoy√© (${deletedRows.rowCount} entr√©es supprim√©es)`);

    // 4. V√©rification finale
    console.log('üîç V√©rification finale...');
    const finalConfig = await client.query(`
      SELECT 
        g.id, 
        g.name, 
        g.nocodb_config_id, 
        g.nocodb_table_id, 
        g.invoice_column_name,
        n.base_url,
        n.project_id
      FROM groups g 
      LEFT JOIN nocodb_config n ON g.nocodb_config_id = n.id 
      WHERE g.name IN ('Frouard', 'Houdemont')
    `);

    console.log('üìã Configuration finale:');
    finalConfig.rows.forEach(row => {
      console.log(`  - ${row.name}:`);
      console.log(`    ‚Ä¢ Table ID: ${row.nocodb_table_id}`);
      console.log(`    ‚Ä¢ Colonne: ${row.invoice_column_name}`);
      console.log(`    ‚Ä¢ URL: ${row.base_url}`);
    });

    console.log('üéâ Correction termin√©e avec succ√®s !');
    console.log('');
    console.log('üìù Actions √† effectuer:');
    console.log('1. Red√©marrer l\'application en production');
    console.log('2. Tester la facture F5162713 pour Houdemont');
    console.log('3. V√©rifier que la coche verte appara√Æt');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Ex√©cution du script
fixProductionNocoDB().catch(console.error);