#!/usr/bin/env node

// Script de nettoyage COMPLET du cache avec v√©rification post-nettoyage
import { Client } from 'pg';

console.log('üßπ NETTOYAGE COMPLET CACHE PRODUCTION + V√âRIFICATION');

async function forceCleanProductionCache() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: false
  });

  try {
    await client.connect();
    console.log('‚úÖ Connexion base de donn√©es r√©ussie');

    // 1. Nettoyage COMPLET
    console.log('\nüóëÔ∏è SUPPRESSION COMPL√àTE DU CACHE...');
    const deleteResult = await client.query('DELETE FROM invoice_verification_cache');
    console.log(`üìä ${deleteResult.rowCount} entr√©es supprim√©es`);

    // 2. Reset s√©quence
    await client.query('ALTER SEQUENCE invoice_verification_cache_id_seq RESTART WITH 1');
    console.log('üîÑ S√©quence remise √† z√©ro');

    // 3. V√©rification vide
    const countResult = await client.query('SELECT COUNT(*) as count FROM invoice_verification_cache');
    console.log(`üìä V√©rification post-nettoyage: ${countResult.rows[0].count} entr√©es restantes`);

    // 4. Test cr√©ation cache F5162713
    console.log('\nüß™ TEST CR√âATION CACHE POUR F5162713...');
    const testInsert = await client.query(`
      INSERT INTO invoice_verification_cache 
      (cache_key, group_id, invoice_reference, delivery_id, result_data, expires_at, created_at) 
      VALUES 
      ($1, $2, $3, $4, $5, $6, NOW())
      RETURNING *
    `, [
      'test_F5162713_5',
      5,
      'F5162713', 
      999,
      JSON.stringify({exists: true, matchType: 'INVOICE_REF', supplier: 'JJA Five'}),
      new Date(Date.now() + 24 * 60 * 60 * 1000) // 24h
    ]);
    
    console.log('‚úÖ Cache test cr√©√©:', {
      id: testInsert.rows[0].id,
      cache_key: testInsert.rows[0].cache_key,
      invoice_reference: testInsert.rows[0].invoice_reference
    });

    // 5. Suppression du test
    await client.query('DELETE FROM invoice_verification_cache WHERE id = $1', [testInsert.rows[0].id]);
    console.log('üóëÔ∏è Cache test supprim√©');

    console.log('\nüéØ R√âSUM√â:');
    console.log('‚úÖ Cache compl√®tement vid√© et op√©rationnel');
    console.log('‚úÖ S√©quence reset √† 1');  
    console.log('‚úÖ Test insertion/suppression OK');
    console.log('‚úÖ Syst√®me pr√™t pour nouvelles v√©rifications');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await client.end();
    console.log('üì° Connexion ferm√©e');
  }
}

forceCleanProductionCache();